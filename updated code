
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class Main extends JFrame implements ActionListener {
    private String currentUserId;
    private double balance;

    private CardLayout cardLayout;
    private JPanel mainPanel;

    private JTextField userIdField;
    private JPasswordField pinField;
    private JTextField depositField;
    private JTextField withdrawField;
    private JTextField newUserIdField;
    private JPasswordField newPinField;
    private JLabel balanceLabel;

    public Main() {
        setTitle("ATM Machine");
        setSize(400, 350);
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        getContentPane().setBackground(new Color(234, 20, 255));

        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);

        mainPanel.add(createLoginPanel(), "Login");
        mainPanel.add(createMenuPanel(), "Menu");
        mainPanel.add(createDepositPanel(), "Deposit");
        mainPanel.add(createWithdrawPanel(), "Withdraw");
        mainPanel.add(createSignupPanel(), "Signup");
        mainPanel.add(createBalancePanel(), "Balance");

        add(mainPanel);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private Connection connectToDatabase() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            return DriverManager.getConnection("jdbc:mysql://localhost:3306/atm", "root", "1234");
        } catch (ClassNotFoundException e) {
            throw new SQLException("JDBC Driver not found.");
        }
    }

    private boolean authenticateUser(String id, int pin) {
        String sql = "SELECT balance FROM users WHERE user_id=? AND pin=?";
        try (Connection conn = connectToDatabase(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, id);
            stmt.setInt(2, pin);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                currentUserId = id;
                balance = rs.getDouble("balance");
                return true;
            }
        } catch (SQLException e) {
            showError("Login Error", e.getMessage());
        }
        return false;
    }

    private void updateBalanceInDatabase() {
        String sql = "UPDATE users SET balance=? WHERE user_id=?";
        try (Connection conn = connectToDatabase(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setDouble(1, balance);
            stmt.setString(2, currentUserId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            showError("Database Error", e.getMessage());
        }
    }

    private void logTransaction(String type, double amount, double currentBalance) {
        String sql = "INSERT INTO transaction_history (user_id, type, amount, balance) VALUES (?, ?, ?, ?)";
        try (Connection conn = connectToDatabase(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, currentUserId);
            stmt.setString(2, type);
            stmt.setDouble(3, amount);
            stmt.setDouble(4, currentBalance);
            stmt.executeUpdate();
        } catch (SQLException e) {
            showError("Transaction Error", e.getMessage());
        }
    }

    private void showError(String title, String message) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
    }

    private JPanel createLoginPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel welcomeLabel = new JLabel("ATM Login", SwingConstants.CENTER);
        welcomeLabel.setFont(new Font("Arial", Font.BOLD, 24));
        panel.add(welcomeLabel, BorderLayout.NORTH);

        JPanel formPanel = new JPanel(new GridLayout(3, 2, 10, 10));

        userIdField = new JTextField();
        pinField = new JPasswordField();

        formPanel.add(new JLabel("User ID:"));
        formPanel.add(userIdField);
        formPanel.add(new JLabel("PIN:"));
        formPanel.add(pinField);

        JButton loginBtn = createButton("Login", "Login", new Color(50, 205, 50));
        JButton signupBtn = createButton("Signup", "Signup", new Color(30, 144, 255));

        formPanel.add(loginBtn);
        formPanel.add(signupBtn);

        panel.add(formPanel, BorderLayout.CENTER);
        return panel;
    }

    private JPanel createMenuPanel() {
        JPanel panel = new JPanel(new GridLayout(4, 1, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        panel.add(createButton("Deposit", "Deposit", new Color(173, 216, 230)));
        panel.add(createButton("Withdraw", "Withdraw", new Color(255, 165, 0)));
        panel.add(createButton("Check Balance", "Check Balance", new Color(255, 255, 0)));
        panel.add(createButton("Exit", "Exit", Color.RED));

        return panel;
    }

    private JPanel createDepositPanel() {
        JPanel panel = new JPanel(new GridLayout(4, 1, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        depositField = new JTextField();
        panel.add(new JLabel("Deposit Amount:"));
        panel.add(depositField);
        panel.add(createButton("Submit", "Submit", new Color(0, 128, 0)));
        panel.add(createButton("Back to Menu", "Back to Menu", new Color(100, 100, 100)));

        return panel;
    }

    private JPanel createWithdrawPanel() {
        JPanel panel = new JPanel(new GridLayout(4, 1, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        withdrawField = new JTextField();
        panel.add(new JLabel("Withdraw Amount:"));
        panel.add(withdrawField);
        panel.add(createButton("Withdraw Now", "Withdraw Now", new Color(255, 69, 0)));
        panel.add(createButton("Back to Menu", "Back to Menu", new Color(100, 100, 100)));

        return panel;
    }

    private JPanel createSignupPanel() {
        JPanel panel = new JPanel(new GridLayout(6, 1, 10, 10));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        newUserIdField = new JTextField();
        newPinField = new JPasswordField();

        panel.add(new JLabel("New User ID:"));
        panel.add(newUserIdField);
        panel.add(new JLabel("New PIN:"));
        panel.add(newPinField);
        panel.add(createButton("Create Account", "CreateAccount", new Color(75, 0, 130)));
        panel.add(createButton("Back to Login", "Back to Login", new Color(100, 100, 100)));

        return panel;
    }

    private JPanel createBalancePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        balanceLabel = new JLabel("", SwingConstants.CENTER);
        balanceLabel.setFont(new Font("Arial", Font.BOLD, 20));
        panel.add(balanceLabel, BorderLayout.CENTER);
        panel.add(createButton("Back to Menu", "Back to Menu", new Color(100, 100, 100)), BorderLayout.SOUTH);
        return panel;
    }

    private JButton createButton(String text, String command, Color color) {
        JButton button = new JButton(text);
        button.setActionCommand(command);
        button.setBackground(color);
        button.setForeground(Color.WHITE);
        button.addActionListener(this);
        return button;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();

        switch (cmd) {
            case "Login":
                try {
                    int pin = Integer.parseInt(String.valueOf(pinField.getPassword()));
                    if (authenticateUser(userIdField.getText(), pin)) {
                        cardLayout.show(mainPanel, "Menu");
                    } else {
                        showError("Login Failed", "Invalid ID or PIN.");
                    }
                } catch (NumberFormatException ex) {
                    showError("Input Error", "PIN must be numeric.");
                }
                break;

            case "Signup":
                cardLayout.show(mainPanel, "Signup");
                break;

            case "Deposit":
                cardLayout.show(mainPanel, "Deposit");
                break;

            case "Submit":
                try {
                    double amount = Double.parseDouble(depositField.getText());
                    if (amount > 0) {
                        balance += amount;
                        updateBalanceInDatabase();
                        logTransaction("Deposit", amount, balance);
                        JOptionPane.showMessageDialog(this, "Deposited $" + amount);
                        depositField.setText("");
                        cardLayout.show(mainPanel, "Menu");
                    } else {
                        showError("Invalid Input", "Amount must be positive.");
                    }
                } catch (NumberFormatException ex) {
                    showError("Invalid Input", "Enter a valid amount.");
                }
                break;

            case "Withdraw":
                cardLayout.show(mainPanel, "Withdraw");
                break;

            case "Withdraw Now":
                try {
                    double amount = Double.parseDouble(withdrawField.getText());
                    if (amount > 0 && amount <= balance) {
                        balance -= amount;
                        updateBalanceInDatabase();
                        logTransaction("Withdraw", amount, balance);
                        JOptionPane.showMessageDialog(this, "Withdrew $" + amount);
                        withdrawField.setText("");
                        cardLayout.show(mainPanel, "Menu");
                    } else {
                        showError("Invalid Input", "Invalid or insufficient amount.");
                    }
                } catch (NumberFormatException ex) {
                    showError("Invalid Input", "Enter a valid amount.");
                }
                break;

            case "Check Balance":
                balanceLabel.setText(String.format("Current Balance: $%.2f", balance));
                cardLayout.show(mainPanel, "Balance");
                break;

            case "Exit":
                System.exit(0);
                break;

            case "Back to Menu":
                cardLayout.show(mainPanel, "Menu");
                break;

            case "Back to Login":
                cardLayout.show(mainPanel, "Login");
                break;

            case "CreateAccount":
                String id = newUserIdField.getText();
                String pinText = new String(newPinField.getPassword());
                if (id.isEmpty() || pinText.isEmpty()) {
                    showError("Input Error", "All fields must be filled.");
                    return;
                }
                try {
                    int pin = Integer.parseInt(pinText);
                    try (Connection conn = connectToDatabase()) {
                        PreparedStatement stmt = conn.prepareStatement("INSERT INTO users (user_id, pin, balance) VALUES (?, ?, ?)");
                        stmt.setString(1, id);
                        stmt.setInt(2, pin);
                        stmt.setDouble(3, 0.0);
                        stmt.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Account created successfully!");
                        newUserIdField.setText("");
                        newPinField.setText("");
                        cardLayout.show(mainPanel, "Login");
                    }
                } catch (SQLException ex) {
                    showError("Account Creation Failed", ex.getMessage());
                } catch (NumberFormatException ex) {
                    showError("Input Error", "PIN must be numeric.");
                }
                break;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(Main::new);
    }
}
